using Gtk;

public class Gunami_LabelBox : Frame {
	private bool _is_column; //true if contains column labels(i.e. HBox)
	private int _size; //no of labels in box
	private int _other_size; //possible length of label text (size of other box)
	private Gunami_label[] _labels;
	private Container _box;
	private string _attribstart;
	private string _attribend;
	private const int MINFONTSIZE=6;
	private const int MAXFONTSIZE=32;
	private double _fontheight;
//======================================================================
	public Gunami_LabelBox(int size, int other_size, bool is_col)
	{
		_is_column=is_col; 
		this.set_shadow_type(Gtk.ShadowType.NONE);
	
		if (_is_column) _box = new HBox(false,0) as Container;
		else _box = new VBox(false,0) as Container;
		
		_labels=new Gunami_label[Resource.MAXSIZE];

		for (var i=0;i<Resource.MAXSIZE;i++)
		{
			Gunami_label l=new Gunami_label("", is_col);
			_labels[i]=l;
		}
		_size=0;
		resize(size, other_size);
		add(_box);
	}
//======================================================================
	public void resize(int new_size, int other_size)
	{
		unhighlight_all();
		if (new_size!=_size)
		{
			int diff=(new_size-_size);
			
			if (diff>0)	for (int i=_size; i<_size+diff; i++)	_box.add(_labels[i]);
			else	for (int i=0; i>diff; i--) remove_label();
			
			_size=new_size;
		}
		_other_size=other_size;
		set_default_fontheight(_size, _other_size);
		set_attribs(_fontheight);
		set_all_zero();
	}
//======================================================================
	public void change_font_height(bool increase)
	{
		if (increase) _fontheight+=1.0;
		else _fontheight-=1.0;
//		_fontheight=_fontheight.clamp(MINFONTSIZE, MAXFONTSIZE);
		set_attribs(_fontheight);
		for (int i=0; i<_size;i++) update_label(i,get_label_text(i));
	}
//======================================================================
	public void highlight(int idx, bool is_highlight)
	{
		if (idx>=_size) return;
		
		if (is_highlight) _labels[idx].set_state(Gtk.StateType.SELECTED);
		else _labels[idx].set_state(Gtk.StateType.NORMAL);
	}
//======================================================================
	public void update_label(int idx, string txt)
	{
		_labels[idx].set_markup(_attribstart+txt+_attribend);
	}
//======================================================================
	public string get_label_text(int idx)
	{
		return _labels[idx].get_text();
	}
//======================================================================
	public string to_string()
	{
		StringBuilder sb=new StringBuilder("");
		
		for (int i=0; i<_size;i++)
		{
			sb.append(get_label_text(i));
			sb.append("\n");
		}
		return sb.str;
	}
//======================================================================
	private void set_attribs(double fontheight)
	{
		 int fontsize=1024*(int)(fontheight);
		_attribstart=@"<span weight='bold' size='$fontsize'>";
		_attribend="</span>";
	}
//======================================================================
	private void set_default_fontheight(int size, int other_size)
	{
		_fontheight=26.0-(double)(int.max(size, other_size));
		_fontheight=_fontheight.clamp(MINFONTSIZE, MAXFONTSIZE);
	}
//======================================================================
	private void remove_label()
	{
		GLib.List<weak Gtk.Widget> l=_box.get_children();
		_box.remove(l.nth_data((uint)l.length()-1));
	}

//======================================================================
	private void unhighlight_all()
	{
		for (int i=0;i<_size;i++) {highlight(i,false);}
	}
//======================================================================
	private void set_all_zero()
	{
		for (var i=0;i<_size;i++)
		{
			_labels[i].set_markup(_attribstart+"0"+_attribend);
		}
	}
}
